{"cells":[{"cell_type":"markdown","source":["Note: All answers that require the making of an array must be called arr\\\n","            Furthermore, please **set the theme to light** and **Run ALL CELLS before starting by going Runtime->Run all**"],"metadata":{"id":"47MNeb9LpaNv"}},{"cell_type":"markdown","source":["#Import"],"metadata":{"id":"XRjxYwOaSTh0"}},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"Mv3VOToiRvqd","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":16,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["#Arrays"],"metadata":{"id":"bpBWcGMRgKqq"}},{"cell_type":"code","source":["array = np.array([1,2,3])"],"metadata":{"id":"ambIOZpTSXc2","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":14,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["Above is 1d array. without [], error\n"],"metadata":{"id":"8WWM2ZQYShPV"}},{"cell_type":"code","source":["array = np.array([[1,2,3],\n","                  [4,5,6]])"],"metadata":{"id":"mG4qmVy4SwdK","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":13,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["Above is a 2d array, as it can be described as a list of lists"],"metadata":{"id":"Tu7YDUFzS7DB"}},{"cell_type":"code","source":["np.array([[[1, 2],\n","           [3, 4]],\n","\n","          [[5, 6],\n","           [7, 8]]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QEjx9TUrSx81","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":12,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"9df181cb-e193-40d3-a122-bc0c974c7904"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[1, 2],\n","        [3, 4]],\n","\n","       [[5, 6],\n","        [7, 8]]])"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["Above is a 3d array(a list of lists of lists). To swallow this, imagine the most inner brackets are lines. The layer out of that contains all the lines, making a 2d plane. The most outer brackets contain all the 2d planes, making a \"depth\" or a 3d object."],"metadata":{"id":"6NQ9LQy2Tsn3"}},{"cell_type":"markdown","source":["\n","\n","\n","\n","  -------------------------------------------------------------------------------------------------------------------------------------------------------"],"metadata":{"id":"wUUq9kjOVTnu"}},{"cell_type":"markdown","source":["#Array Test"],"metadata":{"id":"h0T9T8OyYbxR"}},{"cell_type":"markdown","source":["Q1: Below, make a 1d array named arr containing all even numbers from 1-10"],"metadata":{"id":"K2LqslmYYgrB"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"-bedvKG-Y0TI","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":11,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.array([2,4,6,8,10])</font>\n","\n","---\n","\n"],"metadata":{"id":"GMw9irHkb1Fi"}},{"cell_type":"markdown","source":["Q2: Below, make a matrix(named arr) containing even numbers and odd numbers from 1-10 on different axis"],"metadata":{"id":"-VqXD0h-Y94o"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"KQaWaGg6ZQXP","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":11,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.array([[1,3,5,7,9],[2,4,6,8,10]])</font>\n","\n","---"],"metadata":{"id":"E8DbWJCBc8j9"}},{"cell_type":"markdown","source":["Q3: Below, make a 3d array(named arr) with one layer(matrix) having even and odd nums from 1-10, and the second layer from 11-20, and the third 21-30."],"metadata":{"id":"7lAYUnqaZTGM"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"SZN88TgwbvLP","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":10,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.array([[1,3,5,7,9], [2,4,6,8,10]],\n","[[11,13,15,17,19], [12,14,16,18,20]])</font>\n","\n","---"],"metadata":{"id":"ZJhhB4vXdMmY"}},{"cell_type":"markdown","source":["#Helpful functions for arrays"],"metadata":{"id":"7pkzHE-qVdCS"}},{"cell_type":"code","source":["np.zeros((3,4)) # matrix of floats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UOa0KWNfVaho","executionInfo":{"status":"ok","timestamp":1722020311129,"user_tz":300,"elapsed":10,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"e6fbc4b8-e546-48cc-9860-f4a19a17745c"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., 0.],\n","       [0., 0., 0., 0.],\n","       [0., 0., 0., 0.]])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["np.zeros((3,4), dtype = int) # to change the type of number, use dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tv2Ii14IUyYA","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":10,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"c1055324-46e1-44f4-8c9b-9f3003fc9e34"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0, 0, 0, 0],\n","       [0, 0, 0, 0],\n","       [0, 0, 0, 0]])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["np.ones((2,3)) # to make them one instead of zeros, use the ones() function"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6WAPQrZZWezZ","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":9,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"d2f6c4f7-5b41-445a-926a-4650c7fd7ab3"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1.],\n","       [1., 1., 1.]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["np.full((2,5), fill_value = 91) # making a array full of the fill_value"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UXjVgnCtXEIa","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":8,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"3e5d2c75-12b6-4000-ed24-6cc1fdc37431"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[91, 91, 91, 91, 91],\n","       [91, 91, 91, 91, 91]])"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["np.eye(5, dtype=int) # makes a {first-param} by {first-param} matrix made fully of zeros except for the diagonals"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5tL9YXvvXXQo","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"5d804edb-cc28-4b8d-b580-995a04d503c0"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 0, 0, 0, 0],\n","       [0, 1, 0, 0, 0],\n","       [0, 0, 1, 0, 0],\n","       [0, 0, 0, 1, 0],\n","       [0, 0, 0, 0, 1]])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["np.eye(4, dtype=int)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ahTdKeeXjnP","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"4d3a3d0d-bfc7-45c0-9235-4f1c5ace87ea"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 0, 0, 0],\n","       [0, 1, 0, 0],\n","       [0, 0, 1, 0],\n","       [0, 0, 0, 1]])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["np.arange(0,11,2) # range function, but it returns an array instead of a list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KpAk1LJWYbhi","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"f8001ea0-f5e5-4deb-968a-03760fc18907"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0,  2,  4,  6,  8, 10])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["np.linspace(0, np.pi, 5)  # Evenly spaced range with 5 elements(best used for irrational/non-int values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cIMHFXjBZDAk","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"86a2390e-241d-481b-9477-858ff81e6a7c"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.        , 0.78539816, 1.57079633, 2.35619449, 3.14159265])"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["#Helpful Functions for arrays test"],"metadata":{"id":"qNWcJ_UKefug"}},{"cell_type":"markdown","source":["Disclaimer: All the arrays should be named arr. \\\n","\\\n","Q1:\\\n","Below, make a array of float zeros that is sized 9,2:"],"metadata":{"id":"_1DGZjBbfMKG"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"Afs-KRF1s4N_","executionInfo":{"status":"ok","timestamp":1722020311130,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.zeros([9,2])</font>\n","\n","---"],"metadata":{"id":"Wswy6h8us9CN"}},{"cell_type":"markdown","source":["Q2: Below, make an array of integer ones with 8 columns and 5 rows:"],"metadata":{"id":"Dpj8GxmCt791"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"uhQZRBKEubyn","executionInfo":{"status":"ok","timestamp":1722020311364,"user_tz":300,"elapsed":239,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.ones([5,8], dtype = int)</font>\n","\n","---"],"metadata":{"id":"XeNIuVcBuira"}},{"cell_type":"markdown","source":["Q3: Make an array of 87s with the size of 3,15"],"metadata":{"id":"SESKigAIvioY"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"feZZzN_EwPO-","executionInfo":{"status":"ok","timestamp":1722020311364,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.full([3,15], fill_value = 87)</font>\n","\n","---"],"metadata":{"id":"QYYcP0gqwQQh"}},{"cell_type":"markdown","source":["Q4: Make a 7x7 array of ints, does not matter what the values are."],"metadata":{"id":"30dgJNMcxUJW"}},{"cell_type":"code","source":["# There are many ways to do this, but in this case, please use the helpful function.\n","pass"],"metadata":{"id":"L-Q4RRhsxn56","executionInfo":{"status":"ok","timestamp":1722020311364,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.eye(7, dtype = int)</font>\n","\n","---"],"metadata":{"id":"CJRVsVyNxzPj"}},{"cell_type":"markdown","source":["Q5a: Make a array of 4 equally spaced integers from 1 to 7"],"metadata":{"id":"FxNtfqWEyY8C"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"f9qHZ-c9yyxI","executionInfo":{"status":"ok","timestamp":1722020311364,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.linspace(1, 7, 4)</font>\n","\n","---"],"metadata":{"id":"I__ykDerzOf9"}},{"cell_type":"markdown","source":["Q5b: Make an array of 7 equally spaced numbers from 3 to pi"],"metadata":{"id":"tHaX5A2tzcl_"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"GA7w0rvWzp4F","executionInfo":{"status":"ok","timestamp":1722020311364,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.linspace(3, np.pi, 7)</font>\n","\n","---"],"metadata":{"id":"t2y9dSEgzqwO"}},{"cell_type":"markdown","source":["#Random Arrays"],"metadata":{"id":"ooo3_1iqglTc"}},{"cell_type":"markdown","source":["The .random.random(size=None) function can be used to display an array of specified size filled with random numbers between [0.0, 1.0)"],"metadata":{"id":"P9L6ZV67Ufi6"}},{"cell_type":"code","source":["np.random.random((3,4))"],"metadata":{"id":"FtQhe47ggrFV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1722020311365,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"9b90d60c-ca44-4f27-ec9f-3ebbf6e3b012"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.86791558, 0.41051919, 0.93210739, 0.75386973],\n","       [0.91276214, 0.08818341, 0.97947683, 0.63074925],\n","       [0.26110763, 0.7983883 , 0.0577913 , 0.15864233]])"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["If you want to normally generate numbers with standard deviation, use .random.normal()"],"metadata":{"id":"qiZpgrkMzqVp"}},{"cell_type":"code","source":["np.random.normal(0, 1, (3,4))    # mean 0 and standard deviation 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kxZoXwHYz5Ez","executionInfo":{"status":"ok","timestamp":1722020311365,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"27ee0884-ba85-4b5b-f880-37d4be6dde39"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.51909293,  0.22657023, -0.29992702, -0.44766334],\n","       [ 0.51153695, -2.222676  ,  0.87768342,  0.22017551],\n","       [-1.18931994,  3.54695198,  0.22287714,  1.06042519]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["If you want to randomly generate numbers between a range, consider .random.randint()"],"metadata":{"id":"h3UucOHp0zTg"}},{"cell_type":"code","source":["np.random.randint(5,10,(2,3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V6Mfj-6b09BY","executionInfo":{"status":"ok","timestamp":1722020311365,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"13b50779-405c-4a4a-8bd2-9c36e7e16521"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[5, 9, 7],\n","       [9, 8, 5]])"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["The above code generates a 2x3 matrix of random numbers from 5 to 10. Note: 5 is in the range, while 10 is not."],"metadata":{"id":"AQkskv4m1Rnq"}},{"cell_type":"code","source":["np.random.seed(0)\n","print(np.random.randint(0, 100, 10))\n","print(np.random.normal(0, 1, 10))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"eYE0-K3s2LoP","executionInfo":{"status":"ok","timestamp":1722020311939,"user_tz":300,"elapsed":578,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"996213ea-ada3-489c-ed9b-3f6fe6c013f1"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["[44 47 64 67 67  9 83 21 36 87]\n","[ 1.26611853 -0.50587654  2.54520078  1.08081191  0.48431215  0.57914048\n"," -0.18158257  1.41020463 -0.37447169  0.27519832]\n"]}]},{"cell_type":"markdown","source":[".random.seed() is a function that, for every seed, has a specified random generation. In simple words, if you ran this code ANYWHERE, it would always return the same code. Click run again to see this.  \n","This helps as we sometimes need to use the same data again. \\\n","\n","---\n","\n","\n","\n"],"metadata":{"id":"6YZsfjMZ2WxG"}},{"cell_type":"markdown","source":["#Random arrays test"],"metadata":{"id":"NE6kPaar9PeO"}},{"cell_type":"markdown","source":["Q1: Below, make a random 6x4 array with mean 7 and standard deviation 2"],"metadata":{"id":"EqsBd4JT9dDo"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"7kqPDeIi-nAt","executionInfo":{"status":"ok","timestamp":1722020311939,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.random.normal(7,2,(6,4))</font>\n","\n","---"],"metadata":{"id":"4PdPx2CA-oIQ"}},{"cell_type":"markdown","source":["Q2: Below, make a 2x2 array of numbers of range 3 to 8"],"metadata":{"id":"AaqAo4p1_L5J"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"qNZgTA8n_sMJ","executionInfo":{"status":"ok","timestamp":1722020311939,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.random.randint(3, 8, (2,2))</font>\n","\n","---"],"metadata":{"id":"WsahVG6D_sie"}},{"cell_type":"markdown","source":["Q3: Make an 8 element array of seed 472"],"metadata":{"id":"13NDfjZP_9t3"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"kGWC25ztAQV7","executionInfo":{"status":"ok","timestamp":1722020311939,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":29,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>np.random.seed(472) \\\n","arr = np.random.random((1,8))</font>\n","\n","---"],"metadata":{"id":"CZK-6mJvARHn"}},{"cell_type":"markdown","source":["Q4: Make a random 3x9 array of numbers between 0 and 1"],"metadata":{"id":"o9ajak5uA11l"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"KcTriPg9BDM1","executionInfo":{"status":"ok","timestamp":1722020311939,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>arr = np.random.random((3,9))</font>\n","\n","\n","---\n","\n"],"metadata":{"id":"L-qr9p3NBDP3"}},{"cell_type":"markdown","source":["#Array types and attributes"],"metadata":{"id":"VKPkBeqa_t8s"}},{"cell_type":"markdown","source":["Arrays have different attributes. \\\n","Ndim is the number of dimensions, \\\n","Shape is the shape of the array, ex: (3,3) \\\n","Size is the number of elements in the array \\\n","Dtype is the type of the elements"],"metadata":{"id":"M0iYGw7lAHEE"}},{"cell_type":"code","source":["def info(name, a): # we are making this function to help\n","    print(f\"{name} has dim {a.ndim}, shape {a.shape}, size {a.size}, and dtype {a.dtype}:\")\n","    print(a)"],"metadata":{"id":"p1_e5Aq3D592","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["arr = np.array([[6,5,9,2], [3,1,6,7]])\n","info(\"arr\", arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i60cp8cWltB0","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"48467444-b435-49ff-de01-81e6600dd9e7"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["arr has dim 2, shape (2, 4), size 8, and dtype int64:\n","[[6 5 9 2]\n"," [3 1 6 7]]\n"]}]},{"cell_type":"code","source":["arr2 = np.array([arr,arr])\n","info(\"arr2\", arr2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D5HqrQe5mjx7","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"558921ec-758d-411c-b946-c0ae12cc17e8"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["arr2 has dim 3, shape (2, 2, 4), size 16, and dtype int64:\n","[[[6 5 9 2]\n","  [3 1 6 7]]\n","\n"," [[6 5 9 2]\n","  [3 1 6 7]]]\n"]}]},{"cell_type":"code","source":["arr3 = np.array([arr2, arr2])\n","info(\"arr3\", arr3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5SWLHRJmuyN","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"a397c79f-a06a-4a5d-8bc5-848f2f5f077d"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["arr3 has dim 4, shape (2, 2, 2, 4), size 32, and dtype int64:\n","[[[[6 5 9 2]\n","   [3 1 6 7]]\n","\n","  [[6 5 9 2]\n","   [3 1 6 7]]]\n","\n","\n"," [[[6 5 9 2]\n","   [3 1 6 7]]\n","\n","  [[6 5 9 2]\n","   [3 1 6 7]]]]\n"]}]},{"cell_type":"markdown","source":["#Array types and attributes test"],"metadata":{"id":"60pQJuZjm8I_"}},{"cell_type":"markdown","source":["Below, find and print how many dimensions and type does m have:"],"metadata":{"id":"fdXrmSsInE6F"}},{"cell_type":"code","source":["m = np.array([[[3, 6, 2, 9], [2, 7, 4, 0]], [[4, 2, 8, 2], [7, 3, 1, 8]]])"],"metadata":{"id":"AA2CRjpbnNas","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["pass"],"metadata":{"id":"htxusDFRnv3y","executionInfo":{"status":"ok","timestamp":1722020311940,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>print(m.ndim, \"\\n\", m.dtype)</font>\n","\n","---"],"metadata":{"id":"vacEQ1BgnxvT"}},{"cell_type":"markdown","source":["Below find out the shape of x, and how many elements are in x:"],"metadata":{"id":"DmyA8t8bn5W4"}},{"cell_type":"code","source":["x = np.array([[\"C\", \"o\", \"d\", \"e\"], [\"8\", \"p\" ,\"8\", \"x\"]])"],"metadata":{"id":"QJm-1X5GoJ6j","executionInfo":{"status":"ok","timestamp":1722020312160,"user_tz":300,"elapsed":223,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["pass"],"metadata":{"id":"x0iXVWOqoY4o","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":10,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":38,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>print(x.shape, \"\\n\", x.size)</font>\n","\n","---"],"metadata":{"id":"qIVJTdbIpF1y"}},{"cell_type":"markdown","source":["#Indexing, slicing, and reshaping"],"metadata":{"id":"MzjRyoYeq0Dn"}},{"cell_type":"markdown","source":["##Indexing"],"metadata":{"id":"IdLi53NkrMom"}},{"cell_type":"markdown","source":["To index, index like a list"],"metadata":{"id":"mMzJaLR4rbL3"}},{"cell_type":"code","source":["a = np.array([3, 7, 1, 8, 9, 2, 0])\n","print(a[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jjQShwh9rwLw","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":9,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"0a434a7f-5ddc-4a57-ab7b-6f66fee86955"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["7\n"]}]},{"cell_type":"markdown","source":["For multidimential arrays, you can use one number to display dimensions, and a tuple to display a single element."],"metadata":{"id":"iz8d0yofsGvk"}},{"cell_type":"code","source":["multi = np.array([[\"Why\", \"When\", \"?\"], [\"How\", \"What\", \"?\"], [\"Ex\", \"More Ex\", \"Idk\"]])\n","print(\"One element:\", multi[1,2])\n","print(\"One element:\", multi[-1,1]) # -1 goes backwards, consequently going from the last element backwards\n","print(\"One dimension:\", multi[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OfrjEoUBs4ii","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":9,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"c04f97db-fb02-4f58-b3bf-b6e89b376589"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["One element: ?\n","One element: More Ex\n","One dimension: ['How' 'What' '?']\n"]}]},{"cell_type":"markdown","source":["You can also modify arrays using brackets:"],"metadata":{"id":"GWW2r7jUuaHr"}},{"cell_type":"code","source":["q = np.array([[[3, 2, 6], [5, 6, 1]], [[6, 3, 8], [0, 4, 2]]])\n","\n","print(q[1,0,2])\n","\n","q[1,0,2] = 10\n","\n","print(q[1,0,2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CFB7MoTGuol4","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":8,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"6dfbcdfa-8da4-4ad2-ec19-3db59b1b1680"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["8\n","10\n"]}]},{"cell_type":"markdown","source":["##Indexing Test"],"metadata":{"id":"e_DutZXPCL02"}},{"cell_type":"markdown","source":["Q1a: Print the 2 from this list by indexing."],"metadata":{"id":"DMJxs-xoCSNZ"}},{"cell_type":"code","source":["numbers = np.array([[2, 6, 3], [5, 9, 5]])"],"metadata":{"id":"eGYYTLUKCfXV","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":8,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["pass"],"metadata":{"id":"LLZVI5pnC--U","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>print(numbers[0,0])</font>\n","\n","---"],"metadata":{"id":"IWnbM6LRCp5t"}},{"cell_type":"markdown","source":["Q1b: Print the second row(5, 9, 5) from numbers:"],"metadata":{"id":"iuAF7rXfDCrq"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"3Q6IZOOeDe4L","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color='white'>print(numbers[1]) or print(numbers[-1])</font>\n","\n","---"],"metadata":{"id":"sYwxMquCDhxH"}},{"cell_type":"markdown","source":["Q2: Change the 8 in p to a 2. Remember to print the 8 before and after you change it."],"metadata":{"id":"GFlbIEdSDw8X"}},{"cell_type":"code","source":["p = np.array([[[2, 2, 2], [2, 2, 2]], [[2, 2, 2], [2, 2, 8]]])"],"metadata":{"id":"nqWbFS-eEXac","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["##Slicing"],"metadata":{"id":"D5uTHQ3fE7xW"}},{"cell_type":"markdown","source":["This portion was made with the help of [w3schools](https://www.w3schools.com/python/numpy/numpy_array_slicing.asp)\n","\n","\n","\n","Slicing means to take a \"slice\" or portion of a array. The format for slicing is [start:end:step], where the end is excluded, but the start is included."],"metadata":{"id":"OjwRC5RMFEpx"}},{"cell_type":"code","source":["a = np.array([1, 4, 2, 7, 9, 5])\n","print(a)\n","print(a[1:3]) # This takes a \"slice\" from index [1, 3) 1 is included, but 3 is not."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9xKofVxJFALc","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"dcdc74ca-e3ca-4311-aa91-7565146eb376"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 4 2 7 9 5]\n","[4 2]\n"]}]},{"cell_type":"markdown","source":[" Step is not neccesery but it can be useful, and is used like shown below:"],"metadata":{"id":"QQyQNfT2HV8Y"}},{"cell_type":"code","source":["print(a[1:5:2]) # every other number from index 1 from 5"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SGDzceTGHUVs","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"252d49fe-88e3-491c-a0ca-eff642876a7d"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["[4 7]\n"]}]},{"cell_type":"markdown","source":["There is some other syntaxes that could be helpful in some rare cases."],"metadata":{"id":"6tU6hZ5BIvn2"}},{"cell_type":"code","source":["arr = np.array([1, 2, 3, 4, 5, 6, 7])\n","print(arr, \"\\n\")\n","\n","# prints from index 4 to the end of the array\n","print(arr[4:], \"\\n\")\n","\n","# prints from the beginning of the list to index 4(not included)\n","print(arr[:4], \"\\n\")\n","\n","# leaving start empty and end empty, which means from the start of the list to the end, print every other number because step is 2.\n","print(arr[::2], \"\\n\")\n","\n","# using the above principle, this reverses the list\n","print(arr[::-1], \"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z_ggvQLQIvG9","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"5c21053b-8c10-4ecf-cf68-90f137f93033"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5 6 7] \n","\n","[5 6 7] \n","\n","[1 2 3 4] \n","\n","[1 3 5 7] \n","\n","[7 6 5 4 3 2 1] \n","\n"]}]},{"cell_type":"markdown","source":["You can do this with 2d arrays too.\n","\n","Look at the examples below:"],"metadata":{"id":"-uWq3xCuKypZ"}},{"cell_type":"code","source":["arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n","\n","print(arr[1, 1:4])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9IxvIWiILWVn","executionInfo":{"status":"ok","timestamp":1722020312161,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"b1e8e0e7-9da5-4242-a2c4-deeb4c5bd988"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["[7 8 9]\n"]}]},{"cell_type":"markdown","source":["The above code takes a slice from the second row, from indexes 1 to 4(not incl.)"],"metadata":{"id":"xczh7nrPLcQw"}},{"cell_type":"code","source":["print(arr[0:2, 2]) # From both elements, return the index 2."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RlE6NEurLuEf","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"efd0b332-7344-4f41-afcb-7e3d47f3290a"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["[3 8]\n"]}]},{"cell_type":"code","source":["print(arr[0:2, 1:4]) # From both elements, return indexes 1:4(not incl.)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BUyBOWGYmDIr","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"eb39b5d7-ed05-4bff-af80-158a9bfb572d"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["[[2 3 4]\n"," [7 8 9]]\n"]}]},{"cell_type":"code","source":["print(arr[1, 2:5]) # From row 2, return indexes 2 to 5(not incl.)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TuDMbuD0lkt5","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"93c1770b-caae-446b-e838-3a3af5675684"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 8  9 10]\n"]}]},{"cell_type":"markdown","source":["##Slicing Test"],"metadata":{"id":"-0Dz5lUVmR5N"}},{"cell_type":"markdown","source":["Q1: Below, print from index 2 to 5(incl.)."],"metadata":{"id":"r8LDdCt3mXnv"}},{"cell_type":"code","source":["arr = np.array([4, 1, 6, 3, 7, 2, 5, 1, 4, 7])\n","\n","pass"],"metadata":{"id":"HbJi2X20mhkK","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":53,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color=\"white\">print(arr[2:6]) # 6 because 5 is included.</font>\n","\n","---\n","\n"],"metadata":{"id":"5lTndkYOmq5n"}},{"cell_type":"markdown","source":["Q2: Below, print every 3rd element from the above array."],"metadata":{"id":"h28z185mnLWg"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"hBFDv41SnjMO","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">print(arr[::3])</font>\n","\n","---\n","\n"],"metadata":{"id":"35TE9Syfnj00"}},{"cell_type":"markdown","source":["Q3: Below, reverse arr"],"metadata":{"id":"4kIG8Z0In0b2"}},{"cell_type":"code","source":["pass"],"metadata":{"id":"33MxhgsJoJrF","executionInfo":{"status":"ok","timestamp":1722020312162,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">print(arr[::-1])</font>\n","\n","---\n","\n"],"metadata":{"id":"YF9O2Q__oMca"}},{"cell_type":"markdown","source":["Q4: Below, print indexes 1 to 3(incl.) on rows 0 **and** 2"],"metadata":{"id":"7HpI0a9Voa4J"}},{"cell_type":"code","source":["arr = np.array([[8, 5, 2, 0], [1, 6, 3, 7], [5, 1, 6, 3]])\n","pass"],"metadata":{"id":"g8oPVoGZoq8p","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":203,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":56,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">print(arr[0:2:2, 1:4])</font>\n","\n","---\n","\n"],"metadata":{"id":"iFpySzZ4or2s"}},{"cell_type":"markdown","source":["##Reshaping"],"metadata":{"id":"9Mjymp-dqM9q"}},{"cell_type":"markdown","source":["Reshaping is the changing the shape of an array. Ex: from 3x3 to 1x9"],"metadata":{"id":"-0_FNbzdqY3A"}},{"cell_type":"code","source":["arr = np.arange(0, 9)\n","info(\"arr\", arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"l5zU7kVxOf7s","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":8,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"d945e032-dc29-4a9c-a6e5-ebf5d9e98588"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["arr has dim 1, shape (9,), size 9, and dtype int64:\n","[0 1 2 3 4 5 6 7 8]\n"]}]},{"cell_type":"code","source":["newarr = np.reshape(arr, (3, 3))\n","info(\"newarr\", newarr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fNukF1pEO6zz","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":8,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"ff569aa1-ae24-47de-f099-27f3a6044188"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["newarr has dim 2, shape (3, 3), size 9, and dtype int64:\n","[[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n"]}]},{"cell_type":"markdown","source":["The syntax for reshaping is .reshape(*array*, (*rows*, *columns*))."],"metadata":{"id":"g740FyqgPOXI"}},{"cell_type":"code","source":["d=np.arange(4)\n","dr=d.reshape(1,4)\n","dc=d.reshape(4,1)\n","info(\"d\", d)\n","info(\"dr\", dr)\n","info(\"dc\", dc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHtjyXR8Pipa","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"15664da6-b59e-491a-94ef-c387c039dce8"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["d has dim 1, shape (4,), size 4, and dtype int64:\n","[0 1 2 3]\n","dr has dim 2, shape (1, 4), size 4, and dtype int64:\n","[[0 1 2 3]]\n","dc has dim 2, shape (4, 1), size 4, and dtype int64:\n","[[0]\n"," [1]\n"," [2]\n"," [3]]\n"]}]},{"cell_type":"markdown","source":["The above reshapes changed the array into a row(dr) and a column(dc). But there is a keyword that can be used for changing arrays into rows and columns. **np.newaxis**"],"metadata":{"id":"DZvvkKwFPuMY"}},{"cell_type":"code","source":["info(\"d\", d)\n","info(\"dcol\", d[:, np.newaxis])\n","info(\"drow\", d[np.newaxis, :])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q1QKxYGcQxM2","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"5ae8d63d-309c-4036-f761-9ee246a86ab7"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["d has dim 1, shape (4,), size 4, and dtype int64:\n","[0 1 2 3]\n","dcol has dim 2, shape (4, 1), size 4, and dtype int64:\n","[[0]\n"," [1]\n"," [2]\n"," [3]]\n","drow has dim 2, shape (1, 4), size 4, and dtype int64:\n","[[0 1 2 3]]\n"]}]},{"cell_type":"markdown","source":["##Reshaping test"],"metadata":{"id":"GSBMjymaSK_z"}},{"cell_type":"markdown","source":["Q1: Make k into shape 3x4."],"metadata":{"id":"k1Ypw5coSO0J"}},{"cell_type":"code","source":["k = np.arange(12)\n","pass"],"metadata":{"id":"Zyp5FQ7sScl1","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":61,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">arr = np.reshape(k, (3,4))<\\font>\n","\n","---\n","\n"],"metadata":{"id":"sZ_dkFs8SjfI"}},{"cell_type":"markdown","source":["Q2: Make k a row. Result: [[1, 2, 3, 4, 5]]"],"metadata":{"id":"Kf-ro0RbTC7z"}},{"cell_type":"code","source":["k = np.array([[1], [2], [3], [4], [5]])\n","pass"],"metadata":{"id":"C_E_RZfSTppP","executionInfo":{"status":"ok","timestamp":1722020312361,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">np.reshape(k, (1,5))<\\font>\n","\n","---\n","\n"],"metadata":{"id":"DoDEsroqUfic"}},{"cell_type":"markdown","source":["Q3: Make k a column. Result: [[1], [2], [3], [4], [5]]"],"metadata":{"id":"htCNB7uvU0PT"}},{"cell_type":"code","source":["k = np.arange(1,6)"],"metadata":{"id":"9R-RvJkKU90L","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":7,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":63,"outputs":[]},{"cell_type":"markdown","source":["Answer(Select to see): <font color = \"white\">k = k[:, np.newaxis]<\\font>\n","\n","---\n","\n"],"metadata":{"id":"2YI5mGXfVAQl"}},{"cell_type":"markdown","source":["#Array concatenation, splitting and stacking\n"],"metadata":{"id":"VX9zG0aoWI9g"}},{"cell_type":"markdown","source":["Array concatenation is when two arrays are combined. We can do this in a variety of ways."],"metadata":{"id":"Pf4xg1NQrZmv"}},{"cell_type":"markdown","source":["You can use .concatenate((a,b)) as shown below to concatenate 1d arrays"],"metadata":{"id":"arGXv3eUfm1m"}},{"cell_type":"code","source":["arr1 = np.arange(9)\n","arr2 = np.arange(2)\n","print(f\"arr1 has shape {arr1.shape}: {arr1}\")\n","print(f\"arr2 has shape {arr2.shape}: {arr2}\")\n","print(np.concatenate((arr1, arr2)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ywFsQkHlgAtn","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"7202c60d-e27a-4e3a-e3b2-59844709babe"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["arr1 has shape (9,): [0 1 2 3 4 5 6 7 8]\n","arr2 has shape (2,): [0 1]\n","[0 1 2 3 4 5 6 7 8 0 1]\n"]}]},{"cell_type":"markdown","source":["To concatenate 2d arrays, there are two ways you can go.\n","\n","One way is to use the normal method that we used for 1d arrays, shown below:"],"metadata":{"id":"ShyTOBKKh9eY"}},{"cell_type":"code","source":["c=np.arange(1,5).reshape(2,2)\n","print(f\"c has shape {c.shape}:\", c, sep=\"\\n\")\n","np.concatenate((c,c))   # concatenating 2d arrays"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oop8rrGCiXu_","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"742777f2-d5a7-4c6c-cbc4-2695cdce19f3"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["c has shape (2, 2):\n","[[1 2]\n"," [3 4]]\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[1, 2],\n","       [3, 4],\n","       [1, 2],\n","       [3, 4]])"]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["The above concatenation only concatenates vertically(or axis 0). To concatenate horizontally(or axis 1), use the *axis = 0* method."],"metadata":{"id":"kwlQElwyilPI"}},{"cell_type":"code","source":["np.concatenate((c,c), axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AERE1RZzi9B2","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":6,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"71cfd6d1-a726-47be-cc37-a3041164574f"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1, 2, 1, 2],\n","       [3, 4, 3, 4]])"]},"metadata":{},"execution_count":66}]},{"cell_type":"markdown","source":["To concatenate two different arrays of different dimensions, you must reshape the lower dimension array into a higher dimension."],"metadata":{"id":"dK0NoO3CjF8s"}},{"cell_type":"code","source":["print(\"New row:\")\n","print(np.concatenate((c,arr2.reshape(1,2))))\n","print(\"New column:\")\n","print(np.concatenate((c,arr2.reshape(2,1)), axis=1))\n","# Remember arr2 was the one dimensional array: [0, 1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fnnu9qdBjl_F","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"0b9c75af-f19d-413c-8aba-0d303452724e"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["New row:\n","[[1 2]\n"," [3 4]\n"," [0 1]]\n","New column:\n","[[1 2 0]\n"," [3 4 1]]\n"]}]},{"cell_type":"markdown","source":["To make 2 arrays into a higher dimension when merging them, use .stack((a, b))"],"metadata":{"id":"XOr2cz1kk_9M"}},{"cell_type":"code","source":["arr = np.arange(5) # 1d array\n","arr_new = np.stack((arr, arr))\n","print(arr_new) # 2d array"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_x421uvZlJEm","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":5,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"ced8e14c-e492-4e0f-a384-fa07a79b5ec1"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1 2 3 4]\n"," [0 1 2 3 4]]\n"]}]},{"cell_type":"markdown","source":["If you would like to make the merged list stacked horizontally, use the *axis = 1* parameter"],"metadata":{"id":"Lj_cD_jeSYkn"}},{"cell_type":"code","source":["print(np.stack((arr, arr), axis = 1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5EwnSY9USikP","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"c68b37ee-4fe9-4ae5-fb7a-b5ea9c237cb1"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 0]\n"," [1 1]\n"," [2 2]\n"," [3 3]\n"," [4 4]]\n"]}]},{"cell_type":"markdown","source":["The opposite of stacking is .split\n","\n",".split splits an array at an index, shown below."],"metadata":{"id":"4IXxFpeTkIZZ"}},{"cell_type":"code","source":["d=np.arange(12).reshape(6,2)\n","print(\"d:\")\n","print(d)\n","d1,d2 = np.split(d, 2)\n","print(\"d1:\")\n","print(d1)\n","print(\"d2:\")\n","print(d2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"draLRYgyktUN","executionInfo":{"status":"ok","timestamp":1722020312362,"user_tz":300,"elapsed":4,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"b7ef7588-e0de-4380-db10-66316d29f1d8"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["d:\n","[[ 0  1]\n"," [ 2  3]\n"," [ 4  5]\n"," [ 6  7]\n"," [ 8  9]\n"," [10 11]]\n","d1:\n","[[0 1]\n"," [2 3]\n"," [4 5]]\n","d2:\n","[[ 6  7]\n"," [ 8  9]\n"," [10 11]]\n"]}]},{"cell_type":"markdown","source":["As you can see, the array split into 2 equal parts."],"metadata":{"id":"QIjpUUZNlbc0"}},{"cell_type":"code","source":["d1, d2, d3 = np.split(d, 3) # split into 3 parts\n","print(\"d1\", d1, sep = \"\\n\")\n","print(\"d2\", d2, sep = \"\\n\")\n","print(\"d3\", d3, sep = \"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VARP4FikmTb3","executionInfo":{"status":"ok","timestamp":1722020312744,"user_tz":300,"elapsed":386,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"fa9546b7-7964-4121-949d-b5829a5edb20"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["d1\n","[[0 1]\n"," [2 3]]\n","d2\n","[[4 5]\n"," [6 7]]\n","d3\n","[[ 8  9]\n"," [10 11]]\n"]}]},{"cell_type":"code","source":["d=np.arange(12).reshape(2,6)\n","print(\"d:\")\n","print(d)\n","parts=np.split(d, (2,3,5), axis=1)\n","print(len(parts))\n","for i, p in enumerate(parts):\n","    print(\"part %i:\" % i)\n","    print(p)\n","\n","  # basically, the list is split at the 2nd column, after 1 and 7, then split at the 3rd column, after 2 and 8, and split after 4 and 10.\n","  # visual representation here: https://docs.google.com/drawings/d/1tL0gf2awE_dB7Rd2s2byAnKIwzxB8CsGXB5gAH5zt3s/edit?usp=sharing"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m4vUytHqn709","executionInfo":{"status":"ok","timestamp":1722020312745,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"4c4f7f71-dfb4-4d04-f645-ee3c7689713b"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["d:\n","[[ 0  1  2  3  4  5]\n"," [ 6  7  8  9 10 11]]\n","4\n","part 0:\n","[[0 1]\n"," [6 7]]\n","part 1:\n","[[2]\n"," [8]]\n","part 2:\n","[[ 3  4]\n"," [ 9 10]]\n","part 3:\n","[[ 5]\n"," [11]]\n"]}]},{"cell_type":"markdown","source":["#Computations on Arrays"],"metadata":{"id":"0wFC1xbVW4p8"}},{"cell_type":"markdown","source":["To multiply each element in a normal list, we do this:"],"metadata":{"id":"0j-VFZ6SX4Os"}},{"cell_type":"code","source":["exlist = [0, 1, 2, 3]\n","\n","for i in exlist:\n","  exlist[i] *= 2\n","\n","print(exlist)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QRc5Dd0TYZx_","executionInfo":{"status":"ok","timestamp":1722020360596,"user_tz":300,"elapsed":174,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"7b5d6763-60a0-4a4b-d9f5-b577261c374b"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 2, 4, 6]\n"]}]},{"cell_type":"markdown","source":["In numpy, we can do this very easily using universal computations(+, -, *, /, etc.)"],"metadata":{"id":"FpW4oBiLaYgW"}},{"cell_type":"code","source":["arr = np.array([0, 1, 2, 3])\n","arr = arr*2\n","print(arr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E7vvpgq-al1K","executionInfo":{"status":"ok","timestamp":1722020485131,"user_tz":300,"elapsed":174,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"2c66aa26-44b0-4c26-bcdd-94b439c4847e"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 2 4 6]\n"]}]},{"cell_type":"markdown","source":["This is a list of all the universal computations"],"metadata":{"id":"EQ6JvuZaa9qe"}},{"cell_type":"markdown","source":["addition\t+\n","\n","subtraction\t-\n","\n","negation(making negative)\t-\n","\n","multiplication\t*\n","\n","division\t/\n","\n","floor division\t//\n","\n","exponentation\t**\n","\n","remainder\t%"],"metadata":{"id":"f_SW632ebDPh"}},{"cell_type":"markdown","source":["#Data of arrays"],"metadata":{"id":"rMfJ-zzwbtCm"}},{"cell_type":"markdown","source":["To get certain data on an array, we can use some keywords:"],"metadata":{"id":"vza6sbxqbwVX"}},{"cell_type":"code","source":["np.random.seed(0)\n","a=np.random.randint(-100, 100, (4,5))\n","print(a)\n","print(f\"Minimum: {a.min()}, maximum: {a.max()}\")\n","print(f\"Sum: {a.sum()}\")\n","print(f\"Mean: {a.mean()}, standard deviation: {a.std()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"027GpFnfb5_3","executionInfo":{"status":"ok","timestamp":1722020768784,"user_tz":300,"elapsed":173,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}},"outputId":"1e3a5650-4ff3-4587-9a8d-cb658b0ad0d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 72 -53  17  92 -33]\n"," [ 95   3 -91 -79 -64]\n"," [-13 -30 -12  40 -42]\n"," [ 93 -61 -13  74 -12]]\n","Minimum: -91, maximum: 95\n","Sum: -17\n","Mean: -0.85, standard deviation: 58.39886557117355\n"]}]},{"cell_type":"markdown","source":["#Exercises"],"metadata":{"id":"wDE-a7RQ2JMm"}},{"cell_type":"markdown","source":["##Row and column exercise"],"metadata":{"id":"1sUyAN_Q2Mfy"}},{"cell_type":"markdown","source":["Exercise 2.12 (row and column vectors)\n","Create function get_row_vectors that returns a list of rows from the input array of shape (n,m), but this time the rows must have shape (1,m). Similarly, create function get_columns_vectors that returns a list of columns (each having shape (n,1)) of the input matrix .\n","\n","Example: for a 2x3 input matrix\n","\n"," [[5, 0, 3],[3, 7, 9]]\n","\n","the result should be\n","\n","Row vectors:\n","\n","[array([[5, 0, 3]]), array([[3, 7, 9]])]\n","\n","Column vectors:\n","\n","[array([[5],\n","        [3]]),\n"," array([[0],\n","        [7]]),\n"," array([[3],\n","        [9]])]\n","\n","The above output is basically just the returned lists printed with print. Only some whitespace is adjusted to make it look nicer. Output is not tested."],"metadata":{"id":"2XaR7bi02UB_"}},{"cell_type":"code","source":["#Make row vector function here\n","\n","#def get_row_vectors(add args):"],"metadata":{"id":"nDZZDAtm3UIz","executionInfo":{"status":"ok","timestamp":1722020312986,"user_tz":300,"elapsed":243,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["#Run row vec using p\n","p = np.array([[5, 0, 3],[3, 7, 9]])"],"metadata":{"id":"d1WRoEy-3XaT","executionInfo":{"status":"ok","timestamp":1722020312986,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":["My answer to row vector(Select to see):\n","\n","<font color = \"white\">\n","  def get_row_vectors(arr): </font>\n","\n","  <font color = \"white\">print(arr.shape) </font>\n","\n","  <font color = \"white\">(a, b) = arr.shape </font>\n","\n","  <font color = \"white\">row_storage = np.zeros(a*b).reshape(a,b) </font>\n","\n","  <font color = \"white\">return arr[0:, 0:] </font>\n","  "],"metadata":{"id":"36dGv6LA2s4X"}},{"cell_type":"code","source":["# make column vector here\n","\n","#def get_col_vectors(add args):"],"metadata":{"id":"iflNbK4S4eH6","executionInfo":{"status":"ok","timestamp":1722020312986,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["#Run col vec using p\n","p = np.array([[5, 0, 3],[3, 7, 9]])"],"metadata":{"id":"Lg4Tgn0X4rdz","executionInfo":{"status":"ok","timestamp":1722020312986,"user_tz":300,"elapsed":3,"user":{"displayName":"Arhaan Saulat","userId":"16010795872913682402"}}},"execution_count":76,"outputs":[]},{"cell_type":"markdown","source":["My answer to column vector(Select to see):\n","\n","<font color = \"white\">def get_col_vectors(arr):</font>\n","\n","  <font color = \"white\">print(arr.shape)</font>\n","\n","  <font color = \"white\">(a,b) = arr.shape</font>\n","\n","  <font color = \"white\">col_storage = np.zeros(a*b, dtype = int).reshape(b,a)</font>\n","\n","  <font color = \"white\">for i in range(b):</font>\n","\n","  <font color = \"white\">col_storage[i] = arr[:,i]</font>\n","\n","  <font color = \"white\">return col_storage</font>"],"metadata":{"id":"KegAduOZ4uyz"}},{"cell_type":"markdown","source":["##Diamond Exercise"],"metadata":{"id":"d-Ai8njO5IN8"}},{"cell_type":"markdown","source":["#Extra Stuff"],"metadata":{"id":"D7QmP6yidoyU"}},{"cell_type":"markdown","source":["https://courses.mooc.fi/org/uh-cs/courses/dap-22/chapter-3/numpy-part-2"],"metadata":{"id":"JGqk4entdqr7"}}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1720172721479}],"collapsed_sections":["XRjxYwOaSTh0","bpBWcGMRgKqq","h0T9T8OyYbxR","7pkzHE-qVdCS","qNWcJ_UKefug","ooo3_1iqglTc","NE6kPaar9PeO","VKPkBeqa_t8s","60pQJuZjm8I_","MzjRyoYeq0Dn","IdLi53NkrMom","-0Dz5lUVmR5N","9Mjymp-dqM9q","VX9zG0aoWI9g","1sUyAN_Q2Mfy"]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}